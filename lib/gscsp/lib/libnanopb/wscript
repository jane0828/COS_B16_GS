#!/usr/bin/env python
# encoding: utf-8
# Copyright (c) 2013-2018 GomSpace A/S. All rights reserved.

import os
import sys
import subprocess
import gs_gcc
import gs_doc
import gs_dist
from waflib.Build import BuildContext

APPNAME = 'nanopb'


def generate_nano_protoc_plugin(ctx):
    make = ['make', '-C', os.path.join(str(ctx.path.abspath()), 'tools/generator/proto')]
    if ctx.cmd == 'build':
        make += ['all']
    elif ctx.cmd == 'clean':
        make += ['clean']
    else:
        return

    exit_code = subprocess.Popen(make).wait()
    sys.stdout.flush()
    sys.stderr.flush()
    if exit_code:
        raise Exception("Command: [%s] failed, exit code: %s" % (make, str(exit_code)))


def protoc(task):
    src = task.inputs[0].abspath()
    dir = task.inputs[0].parent.abspath()
    cmd = 'protoc --python_out=%s --proto_path=%s %s' % (dir, dir, src)
    return task.exec_command(cmd)


def options(ctx):
    ctx.load('gs_gcc')
    gs_gcc.gs_recurse(ctx)

    gr = ctx.add_option_group('lib' + APPNAME + ' options')
    gr.add_option('--nanopb-field-16bit', action='store_true',
                  help='Enables support for Tag numbers and field size > 255')
    gr.add_option('--nanopb-field-32bit', action='store_true',
                  help='Enables support for Tag numbers and field size > 65535')


def configure(ctx):
    ctx.load('gs_gcc')

    ctx.env.GS_PROTOC = ctx.find_program("protoc", var="PROTOC", mandatory=False)
    ctx.env.GS_PROTOC_GEN_DOC = ctx.find_program("protoc-gen-doc", var="PROTOC_GEN_DOC", mandatory=False)
    ctx.env.GS_PROTOC_GEN_NANOPB = ctx.find_program("protoc-gen-nanopb", var="PROTOC_GEN_NANOPB", mandatory=False,
                                                    path_list=os.path.join(ctx.path.abspath(), ("tools/generator/")))

    ctx.env.append_unique('USE_NANOPB', ['util'])
    ctx.env.append_unique('FILES_NANOPB', ['src/nanopb/*.c'])
    ctx.env.append_unique('NANOPB_PATH', 'tools/generator/proto')

    # Nanopb options set globally to ensure that same config is applied to all users of pb.h
    ctx.env.append_unique('DEFINES', ['PB_FIELD_16BIT'])

    if ctx.env.GS_PROTOC:
        ctx.gs_register_handler(function='nano_proto_gen_3_9',
                                filepath='./python/gs/nanopb/waf_nano_proto.py')
        ctx.gs_register_handler(function='nano_proto_gen_1_1',
                                filepath='./python/gs/nanopb/waf_nano_proto.py')

    gs_gcc.gs_recurse(ctx)


def build(ctx):
    gs_gcc.gs_recurse(ctx)

    if ctx.env.GS_PROTOC:
        generate_nano_protoc_plugin(ctx)

    public_include = ctx.gs_include(name=APPNAME, includes=['include', 'include/nanopb'])

    ctx.gs_objects(source=ctx.path.ant_glob(ctx.env.FILES_NANOPB),
                   target=APPNAME,
                   defines=ctx.env.DEFINES_NANOPB,
                   use=ctx.env.USE_NANOPB + [public_include])

    ctx.gs_shlib(source=ctx.path.ant_glob(ctx.env.FILES_NANOPB),
                 target=APPNAME,
                 defines=ctx.env.DEFINES_NANOPB,
                 gs_use_shlib=ctx.env.USE_NANOPB + [public_include])


def doc(ctx):
    gs_doc.add_task_library_doc(ctx, keyvalues={
        'gs_prod_name': 'lib'+APPNAME,
        'gs_prod_desc': 'Nano ProtoBuf (nanopb) Library',
    })


class Doc(BuildContext):
    cmd = fun = 'doc'


def gs_dist(ctx):
    # ctx.set_appname('lib' + APPNAME)
    ctx.add_default_files(source_module=True)
    ctx.add_files(ctx.path.ant_glob('tools/generator/**'))
    ctx.add_license_file("nanopb", "doc/LICENSE.txt")
