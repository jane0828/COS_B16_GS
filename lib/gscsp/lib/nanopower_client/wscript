#!/usr/bin/env python
# encoding: utf-8
# Copyright (c) 2013-2018 GomSpace A/S. All rights reserved.

import os
import gs_gcc
import gs_util

APPNAME = 'nanopower_client'


def options(ctx):
    ctx.load('gs_gcc')
    gs_gcc.gs_recurse(ctx)

    gr = ctx.add_option_group('Nanopower client options')
    gr.add_option('--enable-nanopower-client', action='store_true', help='Enable client for NanoPower')
    gr.add_option('--enable-nanopower2-client', action='store_true', help='Enable client for NanoPower2')
    gr.add_option('--enable-nanopower-slave-client', action='store_true', help='Enable client for NanoPower I2C slave')
    gr.add_option('--disable-nanopower-gosh', action='store_true', help='Disable NanoPower gosh client')
    gr.add_option('--enable_nanopower_config_commands', default=True,
                  action='store_true', help='Enable config commands')


def configure(ctx):
    ctx.load('gs_gcc')

    ctx.env.append_unique('USES_NANOPOWER_CLIENT', ['util', 'gscsp'])

    if ctx.options.enable_nanopower_client:
        ctx.env.append_unique('FILES_NANOPOWER_CLIENT', ['src/nanopower.c'])
        if not ctx.options.disable_nanopower_gosh:
            ctx.env.append_unique('FILES_NANOPOWER_CLIENT', ['src/cmd_eps.c'])
        ctx.define_cond('ENABLE_NANOPOWER_CLIENT', ctx.options.enable_nanopower_client)
        ctx.env.append_unique('CFLAGS', '-DNANOPOWER_CLIENT')

    if ctx.options.enable_nanopower2_client:
        ctx.env.append_unique('FILES_NANOPOWER_CLIENT', ['src/nanopower2.c'])
        if not ctx.options.disable_nanopower_gosh:
            ctx.env.append_unique('FILES_NANOPOWER_CLIENT', ['src/cmd_eps2.c'])
            ctx.env.append_unique('USES_NANOPOWER_CLIENT', ['gosh'])
        ctx.define_cond('ENABLE_NANOPOWER2_CLIENT', ctx.options.enable_nanopower2_client)
        ctx.env.append_unique('CFLAGS', '-DNANOPOWER2_CLIENT')

    if ctx.options.enable_nanopower_slave_client:
        ctx.env.append_unique('FILES_NANOPOWER_CLIENT', ['src/cmd_eps_slave.c'])
        ctx.env.append_unique('USES_NANOPOWER_CLIENT', ['embed'])
        ctx.define_cond('ENABLE_NANOPOWER_SLAVE_CLIENT', ctx.options.enable_nanopower_slave_client)
        ctx.env.append_unique('CFLAGS', '-DNANOPOWER_SLAVE_CLIENT')

    if ctx.options.enable_nanopower_config_commands:
        ctx.env.append_unique('CFLAGS', '-DNANOPOWER_ENABLE_CONFIG_COMMANDS')

    gs_gcc.gs_recurse(ctx)


def build(ctx):
    gs_gcc.gs_recurse(ctx)

    public_include = APPNAME + '_h'
    ctx(export_includes=['.', 'include'], name=public_include)

    ctx.gs_call_handler(handler='param_gen_4_0', name=APPNAME, prefix='eps', generate_addr=False)

    if ctx.env.FILES_NANOPOWER_CLIENT:
        ctx.gs_objects(source=ctx.path.ant_glob(ctx.env.FILES_NANOPOWER_CLIENT),
                       target=APPNAME,
                       use=ctx.env.USES_NANOPOWER_CLIENT + [public_include])

        ctx.gs_shlib(source=ctx.path.ant_glob(ctx.env.FILES_NANOPOWER_CLIENT),
                     target=APPNAME,
                     gs_use_shlib=ctx.env.USES_NANOPOWER_CLIENT,
                     use=[public_include])

    ctx.gs_python_bindings(source=ctx.path.ant_glob('src/bindings/python/*.c'),
                           target=APPNAME,
                           gs_use_shlib=ctx.env.USES_NANOPOWER_CLIENT + [APPNAME, public_include],
                           package='libnanopower_client')


def gs_dist(ctx):
    ctx.add_default_files(source_module=True)
    ctx.add_files(ctx.path.ant_glob('*.h'))
    ctx.add_files(ctx.path.ant_glob('io/**'))
