#!/usr/bin/env python
# encoding: utf-8
# Copyright (c) 2013-2018 GomSpace A/S. All rights reserved.

import os
import gs_gcc
import gs_doc
from waflib.Build import BuildContext

APPNAME = 'rgosh_client'


def options(ctx):
    ctx.load('gs_gcc gs_doc')
    gs_gcc.gs_recurse(ctx)


def configure(ctx):
    ctx.load('gs_gcc gs_doc')

    ctx.env.append_unique('USE_RGOSH_CLIENT', ['nanopb', 'gscsp', 'util'])

    ctx.env.append_unique('FILES_RGOSH_CLIENT', ['src/*.c'])
    ctx.env.append_unique('FILES_RGOSH_CLIENT', ['src/cmd/*.c'])
    ctx.env.append_unique('FILES_RGOSH_CLIENT', ['conf/proto/*.c'])

    ctx.env.append_unique('FILES_RGOSH_CLIENT_PROTO', ['conf/proto/*.proto'])

    ctx.env.append_unique('FILES_RGOSH_CLIENT_PY_BINDINGS', ['src/bindings/python/*.c'])

    ctx.gs_add_doxygen(exclude=['*/include/gs/rgosh/internal/*'])

    gs_gcc.gs_recurse(ctx)


def build(ctx):
    gs_gcc.gs_recurse(ctx)

    public_include = ctx.gs_include(name=APPNAME, includes=['include', 'conf'])

    ctx.gs_call_handler(handler='nano_proto_gen_3_9',
                        source=ctx.path.ant_glob(ctx.env.FILES_RGOSH_CLIENT_PROTO),
                        name='RGOSH_CLIENT_PROTO')

    ctx.gs_objects(source=ctx.path.ant_glob(ctx.env.FILES_RGOSH_CLIENT),
                   target=APPNAME,
                   defines=ctx.env.DEFINES_RGOSH_CLIENT,
                   use=ctx.env.USE_RGOSH_CLIENT + [public_include])

    ctx.gs_shlib(source=ctx.path.ant_glob(ctx.env.FILES_RGOSH_CLIENT),
                 target=APPNAME,
                 defines=ctx.env.DEFINES_RGOSH_CLIENT,
                 gs_use_shlib=ctx.env.USE_RGOSH_CLIENT + [public_include])

    ctx.gs_python_bindings(source=ctx.path.ant_glob(ctx.env.FILES_RGOSH_CLIENT_PY_BINDINGS),
                           target=APPNAME,
                           gs_use_shlib=ctx.env.USE_RGOSH_CLIENT + [APPNAME, public_include],
                           package='librgosh_client')


def doc(ctx):
    gs_doc.gs_library_doc(ctx, keyvalues={
        'gs_prod_name': 'lib'+APPNAME,
        'gs_prod_desc': 'Remote GOSH client library',
    })


class Doc(BuildContext):
    cmd = fun = 'doc'


def gs_dist(ctx):
    gs_gcc.gs_recurse(ctx)
    ctx.add_default_files(source_module=True)
    ctx.add_files(ctx.path.ant_glob('conf/**'))
